
=head1 NAME

Perl::Critic::PolicySummary - Descriptions of the Policy modules included with L<Perl::Critic|Perl::Critic> itself.


=head1 DESCRIPTION

The following Policy modules are distributed with Perl::Critic.
(There are additional Policies that can be found in add-on
distributions.)  The Policy modules have been categorized according to
the table of contents in Damian Conway's book B<Perl Best Practices>.
Since most coding standards take the form "do this..." or "don't do
that...", I have adopted the convention of naming each module
C<RequireSomething> or C<ProhibitSomething>.  Each Policy is listed
here with its default severity.  If you don't agree with the default
severity, you can change it in your F<.perlcriticrc> file.  See the
documentation of each module for its specific details.


=head1 POLICIES

=head2 L<Perl::Critic::Policy::BuiltinFunctions::ProhibitBooleanGrep|Perl::Critic::Policy::BuiltinFunctions::ProhibitBooleanGrep>

Use C<List::MoreUtils::any> instead of C<grep> in boolean context. [Severity 2]

=head2 L<Perl::Critic::Policy::BuiltinFunctions::ProhibitComplexMappings|Perl::Critic::Policy::BuiltinFunctions::ProhibitComplexMappings>

Map blocks should have a single statement. [Severity 3]

=head2 L<Perl::Critic::Policy::BuiltinFunctions::ProhibitLvalueSubstr|Perl::Critic::Policy::BuiltinFunctions::ProhibitLvalueSubstr>

Use 4-argument C<substr> instead of writing C<substr($foo, 2, 6) = $bar>. [Severity 3]

=head2 L<Perl::Critic::Policy::BuiltinFunctions::ProhibitReverseSortBlock|Perl::Critic::Policy::BuiltinFunctions::ProhibitReverseSortBlock>

Forbid $b before $a in sort blocks. [Severity 1]

=head2 L<Perl::Critic::Policy::BuiltinFunctions::ProhibitSleepViaSelect|Perl::Critic::Policy::BuiltinFunctions::ProhibitSleepViaSelect>

Use L<Time::HiRes|Time::HiRes> instead of something like C<select(undef, undef, undef, .05)>. [Severity 5]

=head2 L<Perl::Critic::Policy::BuiltinFunctions::ProhibitStringyEval|Perl::Critic::Policy::BuiltinFunctions::ProhibitStringyEval>

Write C<eval { my $foo; bar($foo) }> instead of C<eval "my $foo; bar($foo);">. [Severity 5]

=head2 L<Perl::Critic::Policy::BuiltinFunctions::ProhibitStringySplit|Perl::Critic::Policy::BuiltinFunctions::ProhibitStringySplit>

Write C<split /-/, $string> instead of C<split '-', $string>. [Severity 2]

=head2 L<Perl::Critic::Policy::BuiltinFunctions::ProhibitUniversalCan|Perl::Critic::Policy::BuiltinFunctions::ProhibitUniversalCan>

Write C<< eval { $foo->can($name) } >> instead of C<UNIVERSAL::can($foo, $name)>. [Severity 3]

=head2 L<Perl::Critic::Policy::BuiltinFunctions::ProhibitUniversalIsa|Perl::Critic::Policy::BuiltinFunctions::ProhibitUniversalIsa>

Write C<< eval { $foo->isa($pkg) } >> instead of C<UNIVERSAL::isa($foo, $pkg)>. [Severity 3]

=head2 L<Perl::Critic::Policy::BuiltinFunctions::ProhibitVoidGrep|Perl::Critic::Policy::BuiltinFunctions::ProhibitVoidGrep>

Don't use C<grep> in void contexts. [Severity 3]

=head2 L<Perl::Critic::Policy::BuiltinFunctions::ProhibitVoidMap|Perl::Critic::Policy::BuiltinFunctions::ProhibitVoidMap>

Don't use C<map> in void contexts. [Severity 3]

=head2 L<Perl::Critic::Policy::BuiltinFunctions::RequireBlockGrep|Perl::Critic::Policy::BuiltinFunctions::RequireBlockGrep>

Write C<grep { $_ =~ /$pattern/ } @list> instead of C<grep /$pattern/, @list>. [Severity 4]

=head2 L<Perl::Critic::Policy::BuiltinFunctions::RequireBlockMap|Perl::Critic::Policy::BuiltinFunctions::RequireBlockMap>

Write C<map { $_ =~ /$pattern/ } @list> instead of C<map /$pattern/, @list>. [Severity 4]

=head2 L<Perl::Critic::Policy::BuiltinFunctions::RequireGlobFunction|Perl::Critic::Policy::BuiltinFunctions::RequireGlobFunction>

Use C<glob q{*}> instead of <*>. [Severity 5]

=head2 L<Perl::Critic::Policy::BuiltinFunctions::RequireSimpleSortBlock|Perl::Critic::Policy::BuiltinFunctions::RequireSimpleSortBlock>

Sort blocks should have a single statement. [Severity 3]

=head2 L<Perl::Critic::Policy::ClassHierarchies::ProhibitAutoloading|Perl::Critic::Policy::ClassHierarchies::ProhibitAutoloading>

AUTOLOAD methods should be avoided. [Severity 3]

=head2 L<Perl::Critic::Policy::ClassHierarchies::ProhibitExplicitISA|Perl::Critic::Policy::ClassHierarchies::ProhibitExplicitISA>

Employ C<use base> instead of C<@ISA>. [Severity 3]

=head2 L<Perl::Critic::Policy::ClassHierarchies::ProhibitOneArgBless|Perl::Critic::Policy::ClassHierarchies::ProhibitOneArgBless>

Write C<bless {}, $class;> instead of just C<bless {};>. [Severity 5]

=head2 L<Perl::Critic::Policy::CodeLayout::ProhibitHardTabs|Perl::Critic::Policy::CodeLayout::ProhibitHardTabs>

Use spaces instead of tabs. [Severity 3]

=head2 L<Perl::Critic::Policy::CodeLayout::ProhibitParensWithBuiltins|Perl::Critic::Policy::CodeLayout::ProhibitParensWithBuiltins>

Write C<open $handle, $path> instead of C<open($handle, $path)>. [Severity 1]

=head2 L<Perl::Critic::Policy::CodeLayout::ProhibitQuotedWordLists|Perl::Critic::Policy::CodeLayout::ProhibitQuotedWordLists>

Write C<qw(foo bar baz)> instead of C<('foo', 'bar', 'baz')>. [Severity 2]

=head2 L<Perl::Critic::Policy::CodeLayout::ProhibitTrailingWhitespace|Perl::Critic::Policy::CodeLayout::ProhibitTrailingWhitespace>

Don't use whitespace at the end of lines. [Severity 1]

=head2 L<Perl::Critic::Policy::CodeLayout::RequireConsistentNewlines|Perl::Critic::Policy::CodeLayout::RequireConsistentNewlines>

Use the same newline through the source. [Severity 4]

=head2 L<Perl::Critic::Policy::CodeLayout::RequireTidyCode|Perl::Critic::Policy::CodeLayout::RequireTidyCode>

Must run code through L<perltidy|perltidy>. [Severity 1]

=head2 L<Perl::Critic::Policy::CodeLayout::RequireTrailingCommas|Perl::Critic::Policy::CodeLayout::RequireTrailingCommas>

Put a comma at the end of every multi-line list declaration, including the last one. [Severity 1]

=head2 L<Perl::Critic::Policy::ControlStructures::ProhibitCStyleForLoops|Perl::Critic::Policy::ControlStructures::ProhibitCStyleForLoops>

Write C<for(0..20)> instead of C<for($i=0; $i<=20; $i++)>. [Severity 2]

=head2 L<Perl::Critic::Policy::ControlStructures::ProhibitCascadingIfElse|Perl::Critic::Policy::ControlStructures::ProhibitCascadingIfElse>

Don't write long "if-elsif-elsif-elsif-elsif...else" chains. [Severity 3]

=head2 L<Perl::Critic::Policy::ControlStructures::ProhibitDeepNests|Perl::Critic::Policy::ControlStructures::ProhibitDeepNests>

Don't write deeply nested loops and conditionals. [Severity 3]

=head2 L<Perl::Critic::Policy::ControlStructures::ProhibitLabelsWithSpecialBlockNames|Perl::Critic::Policy::ControlStructures::ProhibitLabelsWithSpecialBlockNames>

Don't use labels that are the same as the special block names. [Severity 4]

=head2 L<Perl::Critic::Policy::ControlStructures::ProhibitMutatingListFunctions|Perl::Critic::Policy::ControlStructures::ProhibitMutatingListFunctions>

Don't modify C<$_> in list functions. [Severity 5]

=head2 L<Perl::Critic::Policy::ControlStructures::ProhibitNegativeExpressionsInUnlessAndUntilConditions|Perl::Critic::Policy::ControlStructures::ProhibitNegativeExpressionsInUnlessAndUntilConditions>

Don't use operators like C<not>, C<!~>, and C<le> within C<until> and C<unless>. [Severity 3]

=head2 L<Perl::Critic::Policy::ControlStructures::ProhibitPostfixControls|Perl::Critic::Policy::ControlStructures::ProhibitPostfixControls>

Write C<if($condition){ do_something() }> instead of C<do_something() if $condition>. [Severity 2]

=head2 L<Perl::Critic::Policy::ControlStructures::ProhibitUnlessBlocks|Perl::Critic::Policy::ControlStructures::ProhibitUnlessBlocks>

Write C<if(! $condition)> instead of C<unless($condition)>. [Severity 2]

=head2 L<Perl::Critic::Policy::ControlStructures::ProhibitUnreachableCode|Perl::Critic::Policy::ControlStructures::ProhibitUnreachableCode>

Don't write code after an unconditional C<die, exit, or next>. [Severity 4]

=head2 L<Perl::Critic::Policy::ControlStructures::ProhibitUntilBlocks|Perl::Critic::Policy::ControlStructures::ProhibitUntilBlocks>

Write C<while(! $condition)> instead of C<until($condition)>. [Severity 2]

=head2 L<Perl::Critic::Policy::Documentation::PodSpelling|Perl::Critic::Policy::Documentation::PodSpelling>

Check your spelling. [Severity 1]

=head2 L<Perl::Critic::Policy::Documentation::RequirePackageMatchesPodName|Perl::Critic::Policy::Documentation::RequirePackageMatchesPodName>

The C<=head1 NAME> section should match the package. [Severity 1]

=head2 L<Perl::Critic::Policy::Documentation::RequirePodAtEnd|Perl::Critic::Policy::Documentation::RequirePodAtEnd>

All POD should be after C<__END__>. [Severity 1]

=head2 L<Perl::Critic::Policy::Documentation::RequirePodLinksIncludeText|Perl::Critic::Policy::Documentation::RequirePodLinksIncludeText>

Provide text to display with your pod links. [Severity 2]

=head2 L<Perl::Critic::Policy::Documentation::RequirePodSections|Perl::Critic::Policy::Documentation::RequirePodSections>

Organize your POD into the customary sections. [Severity 2]

=head2 L<Perl::Critic::Policy::ErrorHandling::RequireCarping|Perl::Critic::Policy::ErrorHandling::RequireCarping>

Use functions from L<Carp|Carp> instead of C<warn> or C<die>. [Severity 3]

=head2 L<Perl::Critic::Policy::ErrorHandling::RequireCheckingReturnValueOfEval|Perl::Critic::Policy::ErrorHandling::RequireCheckingReturnValueOfEval>

You can't depend upon the value of C<$@>/C<$EVAL_ERROR> to tell whether an C<eval> failed. [Severity 3]

=head2 L<Perl::Critic::Policy::InputOutput::ProhibitBacktickOperators|Perl::Critic::Policy::InputOutput::ProhibitBacktickOperators>

Discourage stuff like C<@files = `ls $directory`>. [Severity 3]

=head2 L<Perl::Critic::Policy::InputOutput::ProhibitBarewordFileHandles|Perl::Critic::Policy::InputOutput::ProhibitBarewordFileHandles>

Write C<open my $fh, q{<}, $filename;> instead of C<open FH, q{<}, $filename;>. [Severity 5]

=head2 L<Perl::Critic::Policy::InputOutput::ProhibitExplicitStdin|Perl::Critic::Policy::InputOutput::ProhibitExplicitStdin>

Use "<>" or "<ARGV>" or a prompting module instead of "<STDIN>". [Severity 4]

=head2 L<Perl::Critic::Policy::InputOutput::ProhibitInteractiveTest|Perl::Critic::Policy::InputOutput::ProhibitInteractiveTest>

Use prompt() instead of -t. [Severity 5]

=head2 L<Perl::Critic::Policy::InputOutput::ProhibitJoinedReadline|Perl::Critic::Policy::InputOutput::ProhibitJoinedReadline>

Use C<local $/ = undef> or L<File::Slurp|File::Slurp> instead of joined readline. [Severity 3]

=head2 L<Perl::Critic::Policy::InputOutput::ProhibitOneArgSelect|Perl::Critic::Policy::InputOutput::ProhibitOneArgSelect>

Never write C<select($fh)>. [Severity 4]

=head2 L<Perl::Critic::Policy::InputOutput::ProhibitReadlineInForLoop|Perl::Critic::Policy::InputOutput::ProhibitReadlineInForLoop>

Write C<< while( $line = <> ){...} >> instead of C<< for(<>){...} >>. [Severity 4]

=head2 L<Perl::Critic::Policy::InputOutput::ProhibitTwoArgOpen|Perl::Critic::Policy::InputOutput::ProhibitTwoArgOpen>

Write C<< open $fh, q{<}, $filename; >> instead of C<< open $fh, "<$filename"; >>. [Severity 5]

=head2 L<Perl::Critic::Policy::InputOutput::RequireBracedFileHandleWithPrint|Perl::Critic::Policy::InputOutput::RequireBracedFileHandleWithPrint>

Write C<print {$FH} $foo, $bar;> instead of C<print $FH $foo, $bar;>. [Severity 1]

=head2 L<Perl::Critic::Policy::InputOutput::RequireBriefOpen|Perl::Critic::Policy::InputOutput::RequireBriefOpen>

Close filehandles as soon as possible after opening them. [Severity 4]

=head2 L<Perl::Critic::Policy::InputOutput::RequireCheckedClose|Perl::Critic::Policy::InputOutput::RequireCheckedClose>

Write C<< my $error = close $fh; >> instead of C<< close $fh; >>. [Severity 2]

=head2 L<Perl::Critic::Policy::InputOutput::RequireCheckedOpen|Perl::Critic::Policy::InputOutput::RequireCheckedOpen>

Write C<< my $error = open $fh, $mode, $filename; >> instead of C<< open $fh, $mode, $filename; >>. [Severity 3]

=head2 L<Perl::Critic::Policy::InputOutput::RequireCheckedSyscalls|Perl::Critic::Policy::InputOutput::RequireCheckedSyscalls>

Return value of flagged function ignored. [Severity 1]

=head2 L<Perl::Critic::Policy::Miscellanea::ProhibitFormats|Perl::Critic::Policy::Miscellanea::ProhibitFormats>

Do not use C<format>. [Severity 3]

=head2 L<Perl::Critic::Policy::Miscellanea::ProhibitTies|Perl::Critic::Policy::Miscellanea::ProhibitTies>

Do not use C<tie>. [Severity 2]

=head2 L<Perl::Critic::Policy::Miscellanea::ProhibitUnrestrictedNoCritic|Perl::Critic::Policy::Miscellanea::ProhibitUnrestrictedNoCritic>

Forbid a bare C<## no critic> [Severity 3]

=head2 L<Perl::Critic::Policy::Miscellanea::ProhibitUselessNoCritic|Perl::Critic::Policy::Miscellanea::ProhibitUselessNoCritic>

Remove ineffective "## no critic" annotations. [Severity 2]

=head2 L<Perl::Critic::Policy::Miscellanea::RequireRcsKeywords|Perl::Critic::Policy::Miscellanea::RequireRcsKeywords>

Put source-control keywords in every file. [Severity 2]

=head2 L<Perl::Critic::Policy::Modules::ProhibitAutomaticExportation|Perl::Critic::Policy::Modules::ProhibitAutomaticExportation>

Export symbols via C<@EXPORT_OK> or C<%EXPORT_TAGS> instead of C<@EXPORT>. [Severity 4]

=head2 L<Perl::Critic::Policy::Modules::ProhibitEvilModules|Perl::Critic::Policy::Modules::ProhibitEvilModules>

Ban modules that aren't blessed by your shop. [Severity 5]

=head2 L<Perl::Critic::Policy::Modules::ProhibitExcessMainComplexity|Perl::Critic::Policy::Modules::ProhibitExcessMainComplexity>

Minimize complexity in code that is B<outside> of subroutines. [Severity 3]

=head2 L<Perl::Critic::Policy::Modules::ProhibitMultiplePackages|Perl::Critic::Policy::Modules::ProhibitMultiplePackages>

Put packages (especially subclasses) in separate files. [Severity 4]

=head2 L<Perl::Critic::Policy::Modules::RequireBarewordIncludes|Perl::Critic::Policy::Modules::RequireBarewordIncludes>

Write C<require Module> instead of C<require 'Module.pm'>. [Severity 5]

=head2 L<Perl::Critic::Policy::Modules::RequireEndWithOne|Perl::Critic::Policy::Modules::RequireEndWithOne>

End each module with an explicitly C<1;> instead of some funky expression. [Severity 4]

=head2 L<Perl::Critic::Policy::Modules::RequireExplicitPackage|Perl::Critic::Policy::Modules::RequireExplicitPackage>

Always make the C<package> explicit. [Severity 4]

=head2 L<Perl::Critic::Policy::Modules::RequireFilenameMatchesPackage|Perl::Critic::Policy::Modules::RequireFilenameMatchesPackage>

Package declaration must match filename. [Severity 5]

=head2 L<Perl::Critic::Policy::Modules::RequireNoMatchVarsWithUseEnglish|Perl::Critic::Policy::Modules::RequireNoMatchVarsWithUseEnglish>

C<use English> must be passed a C<-no_match_vars> argument. [Severity 2]

=head2 L<Perl::Critic::Policy::Modules::RequireVersionVar|Perl::Critic::Policy::Modules::RequireVersionVar>

Give every module a C<$VERSION> number. [Severity 2]

=head2 L<Perl::Critic::Policy::NamingConventions::Capitalization|Perl::Critic::Policy::NamingConventions::Capitalization>

Distinguish different program components by case. [Severity 1]

=head2 L<Perl::Critic::Policy::NamingConventions::ProhibitAmbiguousNames|Perl::Critic::Policy::NamingConventions::ProhibitAmbiguousNames>

Don't use vague variable or subroutine names like 'last' or 'record'. [Severity 3]

=head2 L<Perl::Critic::Policy::Objects::ProhibitIndirectSyntax|Perl::Critic::Policy::Objects::ProhibitIndirectSyntax>

Prohibit indirect object call syntax. [Severity 4]

=head2 L<Perl::Critic::Policy::References::ProhibitDoubleSigils|Perl::Critic::Policy::References::ProhibitDoubleSigils>

Write C<@{ $array_ref }> instead of C<@$array_ref>. [Severity 2]

=head2 L<Perl::Critic::Policy::RegularExpressions::ProhibitCaptureWithoutTest|Perl::Critic::Policy::RegularExpressions::ProhibitCaptureWithoutTest>

Capture variable used outside conditional. [Severity 3]

=head2 L<Perl::Critic::Policy::RegularExpressions::ProhibitComplexRegexes|Perl::Critic::Policy::RegularExpressions::ProhibitComplexRegexes>

Split long regexps into smaller C<qr//> chunks. [Severity 3]

=head2 L<Perl::Critic::Policy::RegularExpressions::ProhibitEnumeratedClasses|Perl::Critic::Policy::RegularExpressions::ProhibitEnumeratedClasses>

Use named character classes instead of explicit character lists. [Severity 1]

=head2 L<Perl::Critic::Policy::RegularExpressions::ProhibitEscapedMetacharacters|Perl::Critic::Policy::RegularExpressions::ProhibitEscapedMetacharacters>

Use character classes for literal meta-characters instead of escapes. [Severity 1]

=head2 L<Perl::Critic::Policy::RegularExpressions::ProhibitFixedStringMatches|Perl::Critic::Policy::RegularExpressions::ProhibitFixedStringMatches>

Use C<eq> or hash instead of fixed-pattern regexps. [Severity 2]

=head2 L<Perl::Critic::Policy::RegularExpressions::ProhibitSingleCharAlternation|Perl::Critic::Policy::RegularExpressions::ProhibitSingleCharAlternation>

Use C<[abc]> instead of C<a|b|c>. [Severity 1]

=head2 L<Perl::Critic::Policy::RegularExpressions::ProhibitUnusedCapture|Perl::Critic::Policy::RegularExpressions::ProhibitUnusedCapture>

Only use a capturing group if you plan to use the captured value. [Severity 3]

=head2 L<Perl::Critic::Policy::RegularExpressions::ProhibitUnusualDelimiters|Perl::Critic::Policy::RegularExpressions::ProhibitUnusualDelimiters>

Use only C<//> or C<{}> to delimit regexps. [Severity 1]

=head2 L<Perl::Critic::Policy::RegularExpressions::RequireBracesForMultiline|Perl::Critic::Policy::RegularExpressions::RequireBracesForMultiline>

Use C<{> and C<}> to delimit multi-line regexps. [Severity 1]

=head2 L<Perl::Critic::Policy::RegularExpressions::RequireDotMatchAnything|Perl::Critic::Policy::RegularExpressions::RequireDotMatchAnything>

Always use the C</s> modifier with regular expressions. [Severity 2]

=head2 L<Perl::Critic::Policy::RegularExpressions::RequireExtendedFormatting|Perl::Critic::Policy::RegularExpressions::RequireExtendedFormatting>

Always use the C</x> modifier with regular expressions. [Severity 3]

=head2 L<Perl::Critic::Policy::RegularExpressions::RequireLineBoundaryMatching|Perl::Critic::Policy::RegularExpressions::RequireLineBoundaryMatching>

Always use the C</m> modifier with regular expressions. [Severity 2]

=head2 L<Perl::Critic::Policy::Subroutines::ProhibitAmpersandSigils|Perl::Critic::Policy::Subroutines::ProhibitAmpersandSigils>

Don't call functions with a leading ampersand sigil. [Severity 2]

=head2 L<Perl::Critic::Policy::Subroutines::ProhibitBuiltinHomonyms|Perl::Critic::Policy::Subroutines::ProhibitBuiltinHomonyms>

Don't declare your own C<open> function. [Severity 4]

=head2 L<Perl::Critic::Policy::Subroutines::ProhibitExcessComplexity|Perl::Critic::Policy::Subroutines::ProhibitExcessComplexity>

Minimize complexity by factoring code into smaller subroutines. [Severity 3]

=head2 L<Perl::Critic::Policy::Subroutines::ProhibitExplicitReturnUndef|Perl::Critic::Policy::Subroutines::ProhibitExplicitReturnUndef>

Return failure with bare C<return> instead of C<return undef>. [Severity 5]

=head2 L<Perl::Critic::Policy::Subroutines::ProhibitManyArgs|Perl::Critic::Policy::Subroutines::ProhibitManyArgs>

Too many arguments. [Severity 3]

=head2 L<Perl::Critic::Policy::Subroutines::ProhibitNestedSubs|Perl::Critic::Policy::Subroutines::ProhibitNestedSubs>

C<sub never { sub correct {} }>. [Severity 5]

=head2 L<Perl::Critic::Policy::Subroutines::ProhibitReturnSort|Perl::Critic::Policy::Subroutines::ProhibitReturnSort>

Behavior of C<sort> is not defined if called in scalar context. [Severity 5]

=head2 L<Perl::Critic::Policy::Subroutines::ProhibitSubroutinePrototypes|Perl::Critic::Policy::Subroutines::ProhibitSubroutinePrototypes>

Don't write C<sub my_function (@@) {}>. [Severity 5]

=head2 L<Perl::Critic::Policy::Subroutines::ProhibitUnusedPrivateSubroutines|Perl::Critic::Policy::Subroutines::ProhibitUnusedPrivateSubroutines>

Prevent unused private subroutines. [Severity 3]

=head2 L<Perl::Critic::Policy::Subroutines::ProtectPrivateSubs|Perl::Critic::Policy::Subroutines::ProtectPrivateSubs>

Prevent access to private subs in other packages. [Severity 3]

=head2 L<Perl::Critic::Policy::Subroutines::RequireArgUnpacking|Perl::Critic::Policy::Subroutines::RequireArgUnpacking>

Always unpack C<@_> first. [Severity 4]

=head2 L<Perl::Critic::Policy::Subroutines::RequireFinalReturn|Perl::Critic::Policy::Subroutines::RequireFinalReturn>

End every path through a subroutine with an explicit C<return> statement. [Severity 4]

=head2 L<Perl::Critic::Policy::TestingAndDebugging::ProhibitNoStrict|Perl::Critic::Policy::TestingAndDebugging::ProhibitNoStrict>

Prohibit various flavors of C<no strict>. [Severity 5]

=head2 L<Perl::Critic::Policy::TestingAndDebugging::ProhibitNoWarnings|Perl::Critic::Policy::TestingAndDebugging::ProhibitNoWarnings>

Prohibit various flavors of C<no warnings>. [Severity 4]

=head2 L<Perl::Critic::Policy::TestingAndDebugging::ProhibitProlongedStrictureOverride|Perl::Critic::Policy::TestingAndDebugging::ProhibitProlongedStrictureOverride>

Don't turn off strict for large blocks of code. [Severity 4]

=head2 L<Perl::Critic::Policy::TestingAndDebugging::RequireTestLabels|Perl::Critic::Policy::TestingAndDebugging::RequireTestLabels>

Tests should all have labels. [Severity 3]

=head2 L<Perl::Critic::Policy::TestingAndDebugging::RequireUseStrict|Perl::Critic::Policy::TestingAndDebugging::RequireUseStrict>

Always C<use strict>. [Severity 5]

=head2 L<Perl::Critic::Policy::TestingAndDebugging::RequireUseWarnings|Perl::Critic::Policy::TestingAndDebugging::RequireUseWarnings>

Always C<use warnings>. [Severity 4]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitCommaSeparatedStatements|Perl::Critic::Policy::ValuesAndExpressions::ProhibitCommaSeparatedStatements>

Don't use the comma operator as a statement separator. [Severity 4]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitComplexVersion|Perl::Critic::Policy::ValuesAndExpressions::ProhibitComplexVersion>

Prohibit version values from outside the module. [Severity 3]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitConstantPragma|Perl::Critic::Policy::ValuesAndExpressions::ProhibitConstantPragma>

Don't C<< use constant FOO => 15 >>. [Severity 4]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitEmptyQuotes|Perl::Critic::Policy::ValuesAndExpressions::ProhibitEmptyQuotes>

Write C<q{}> instead of C<''>. [Severity 2]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitEscapedCharacters|Perl::Critic::Policy::ValuesAndExpressions::ProhibitEscapedCharacters>

Write C<"\N{DELETE}"> instead of C<"\x7F">, etc. [Severity 2]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitImplicitNewlines|Perl::Critic::Policy::ValuesAndExpressions::ProhibitImplicitNewlines>

Use concatenation or HEREDOCs instead of literal line breaks in strings. [Severity 3]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitInterpolationOfLiterals|Perl::Critic::Policy::ValuesAndExpressions::ProhibitInterpolationOfLiterals>

Always use single quotes for literal strings. [Severity 1]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitLeadingZeros|Perl::Critic::Policy::ValuesAndExpressions::ProhibitLeadingZeros>

Write C<oct(755)> instead of C<0755>. [Severity 5]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitLongChainsOfMethodCalls|Perl::Critic::Policy::ValuesAndExpressions::ProhibitLongChainsOfMethodCalls>

Long chains of method calls indicate tightly coupled code. [Severity 2]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitMagicNumbers|Perl::Critic::Policy::ValuesAndExpressions::ProhibitMagicNumbers>

Don't use values that don't explain themselves. [Severity 2]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitMismatchedOperators|Perl::Critic::Policy::ValuesAndExpressions::ProhibitMismatchedOperators>

Don't mix numeric operators with string operands, or vice-versa. [Severity 3]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitMixedBooleanOperators|Perl::Critic::Policy::ValuesAndExpressions::ProhibitMixedBooleanOperators>

Write C< !$foo && $bar || $baz > instead of C< not $foo && $bar or $baz>. [Severity 4]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitNoisyQuotes|Perl::Critic::Policy::ValuesAndExpressions::ProhibitNoisyQuotes>

Use C<q{}> or C<qq{}> instead of quotes for awkward-looking strings. [Severity 2]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitQuotesAsQuotelikeOperatorDelimiters|Perl::Critic::Policy::ValuesAndExpressions::ProhibitQuotesAsQuotelikeOperatorDelimiters>

Don't use quotes (C<'>, C<">, C<`>) as delimiters for the quote-like operators. [Severity 3]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitSpecialLiteralHeredocTerminator|Perl::Critic::Policy::ValuesAndExpressions::ProhibitSpecialLiteralHeredocTerminator>

Don't write C< print <<'__END__' >. [Severity 3]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::ProhibitVersionStrings|Perl::Critic::Policy::ValuesAndExpressions::ProhibitVersionStrings>

Don't use strings like C<v1.4> or C<1.4.5> when including other modules. [Severity 3]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::RequireConstantVersion|Perl::Critic::Policy::ValuesAndExpressions::RequireConstantVersion>

Require $VERSION to be a constant rather than a computed value. [Severity 2]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::RequireInterpolationOfMetachars|Perl::Critic::Policy::ValuesAndExpressions::RequireInterpolationOfMetachars>

Warns that you might have used single quotes when you really wanted double-quotes. [Severity 1]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::RequireNumberSeparators|Perl::Critic::Policy::ValuesAndExpressions::RequireNumberSeparators>

Write C< 141_234_397.0145 > instead of C< 141234397.0145 >. [Severity 2]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::RequireQuotedHeredocTerminator|Perl::Critic::Policy::ValuesAndExpressions::RequireQuotedHeredocTerminator>

Write C< print <<'THE_END' > or C< print <<"THE_END" >. [Severity 3]

=head2 L<Perl::Critic::Policy::ValuesAndExpressions::RequireUpperCaseHeredocTerminator|Perl::Critic::Policy::ValuesAndExpressions::RequireUpperCaseHeredocTerminator>

Write C< <<'THE_END'; > instead of C< <<'theEnd'; >. [Severity 2]

=head2 L<Perl::Critic::Policy::Variables::ProhibitConditionalDeclarations|Perl::Critic::Policy::Variables::ProhibitConditionalDeclarations>

Do not write C< my $foo = $bar if $baz; >. [Severity 5]

=head2 L<Perl::Critic::Policy::Variables::ProhibitEvilVariables|Perl::Critic::Policy::Variables::ProhibitEvilVariables>

Ban variables that aren't blessed by your shop. [Severity 5]

=head2 L<Perl::Critic::Policy::Variables::ProhibitLocalVars|Perl::Critic::Policy::Variables::ProhibitLocalVars>

Use C<my> instead of C<local>, except when you have to. [Severity 2]

=head2 L<Perl::Critic::Policy::Variables::ProhibitMatchVars|Perl::Critic::Policy::Variables::ProhibitMatchVars>

Avoid C<$`>, C<$&>, C<$'> and their English equivalents. [Severity 4]

=head2 L<Perl::Critic::Policy::Variables::ProhibitPackageVars|Perl::Critic::Policy::Variables::ProhibitPackageVars>

Eliminate globals declared with C<our> or C<use vars>. [Severity 3]

=head2 L<Perl::Critic::Policy::Variables::ProhibitPerl4PackageNames|Perl::Critic::Policy::Variables::ProhibitPerl4PackageNames>

Use double colon (::) to separate package name components instead of single quotes ('). [Severity 2]

=head2 L<Perl::Critic::Policy::Variables::ProhibitPunctuationVars|Perl::Critic::Policy::Variables::ProhibitPunctuationVars>

Write C<$EVAL_ERROR> instead of C<$@>. [Severity 2]

=head2 L<Perl::Critic::Policy::Variables::ProhibitReusedNames|Perl::Critic::Policy::Variables::ProhibitReusedNames>

Do not reuse a variable name in a lexical scope [Severity 3]

=head2 L<Perl::Critic::Policy::Variables::ProhibitUnusedVariables|Perl::Critic::Policy::Variables::ProhibitUnusedVariables>

Don't ask for storage you don't need. [Severity 3]

=head2 L<Perl::Critic::Policy::Variables::ProtectPrivateVars|Perl::Critic::Policy::Variables::ProtectPrivateVars>

Prevent access to private vars in other packages. [Severity 3]

=head2 L<Perl::Critic::Policy::Variables::RequireInitializationForLocalVars|Perl::Critic::Policy::Variables::RequireInitializationForLocalVars>

Write C<local $foo = $bar;> instead of just C<local $foo;>. [Severity 3]

=head2 L<Perl::Critic::Policy::Variables::RequireLexicalLoopIterators|Perl::Critic::Policy::Variables::RequireLexicalLoopIterators>

Write C<for my $element (@list) {...}> instead of C<for $element (@list) {...}>. [Severity 5]

=head2 L<Perl::Critic::Policy::Variables::RequireLocalizedPunctuationVars|Perl::Critic::Policy::Variables::RequireLocalizedPunctuationVars>

Magic variables should be assigned as "local". [Severity 4]

=head2 L<Perl::Critic::Policy::Variables::RequireNegativeIndices|Perl::Critic::Policy::Variables::RequireNegativeIndices>

Negative array index should be used. [Severity 4]


=head1 VERSION

This is part of L<Perl::Critic|Perl::Critic> version 1.109.


=head1 AUTHOR

Jeffrey Ryan Thalhammer <jeff@imaginative-software.com>


=head1 COPYRIGHT

Copyright (c) 2005-2010 Imaginative Software Systems.  All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  The full text of this license
can be found in the LICENSE file included with this module.

=cut
